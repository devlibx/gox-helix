// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package helixClusterMysql

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deregisterNodeStmt, err = db.PrepareContext(ctx, deregisterNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeregisterNode: %w", err)
	}
	if q.getActiveNodesStmt, err = db.PrepareContext(ctx, getActiveNodes); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveNodes: %w", err)
	}
	if q.getNodeByIdStmt, err = db.PrepareContext(ctx, getNodeById); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeById: %w", err)
	}
	if q.markInactiveNodesStmt, err = db.PrepareContext(ctx, markInactiveNodes); err != nil {
		return nil, fmt.Errorf("error preparing query MarkInactiveNodes: %w", err)
	}
	if q.updateHeartbeatStmt, err = db.PrepareContext(ctx, updateHeartbeat); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHeartbeat: %w", err)
	}
	if q.upsertNodeStmt, err = db.PrepareContext(ctx, upsertNode); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertNode: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deregisterNodeStmt != nil {
		if cerr := q.deregisterNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deregisterNodeStmt: %w", cerr)
		}
	}
	if q.getActiveNodesStmt != nil {
		if cerr := q.getActiveNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveNodesStmt: %w", cerr)
		}
	}
	if q.getNodeByIdStmt != nil {
		if cerr := q.getNodeByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeByIdStmt: %w", cerr)
		}
	}
	if q.markInactiveNodesStmt != nil {
		if cerr := q.markInactiveNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markInactiveNodesStmt: %w", cerr)
		}
	}
	if q.updateHeartbeatStmt != nil {
		if cerr := q.updateHeartbeatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHeartbeatStmt: %w", cerr)
		}
	}
	if q.upsertNodeStmt != nil {
		if cerr := q.upsertNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertNodeStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	deregisterNodeStmt    *sql.Stmt
	getActiveNodesStmt    *sql.Stmt
	getNodeByIdStmt       *sql.Stmt
	markInactiveNodesStmt *sql.Stmt
	updateHeartbeatStmt   *sql.Stmt
	upsertNodeStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		deregisterNodeStmt:    q.deregisterNodeStmt,
		getActiveNodesStmt:    q.getActiveNodesStmt,
		getNodeByIdStmt:       q.getNodeByIdStmt,
		markInactiveNodesStmt: q.markInactiveNodesStmt,
		updateHeartbeatStmt:   q.updateHeartbeatStmt,
		upsertNodeStmt:        q.upsertNodeStmt,
	}
}
