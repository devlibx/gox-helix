// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package helixClusterMysql

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deregisterNodeStmt, err = db.PrepareContext(ctx, deregisterNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeregisterNode: %w", err)
	}
	if q.getActiveNodesStmt, err = db.PrepareContext(ctx, getActiveNodes); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveNodes: %w", err)
	}
	if q.getAllDomainsAndTaskListsByClusterCnameStmt, err = db.PrepareContext(ctx, getAllDomainsAndTaskListsByClusterCname); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDomainsAndTaskListsByClusterCname: %w", err)
	}
	if q.getAllocationByIdStmt, err = db.PrepareContext(ctx, getAllocationById); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllocationById: %w", err)
	}
	if q.getAllocationByNodeIdStmt, err = db.PrepareContext(ctx, getAllocationByNodeId); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllocationByNodeId: %w", err)
	}
	if q.getAllocationsForTasklistStmt, err = db.PrepareContext(ctx, getAllocationsForTasklist); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllocationsForTasklist: %w", err)
	}
	if q.getClusterStmt, err = db.PrepareContext(ctx, getCluster); err != nil {
		return nil, fmt.Errorf("error preparing query GetCluster: %w", err)
	}
	if q.getClustersByDomainStmt, err = db.PrepareContext(ctx, getClustersByDomain); err != nil {
		return nil, fmt.Errorf("error preparing query GetClustersByDomain: %w", err)
	}
	if q.getNodeByIdStmt, err = db.PrepareContext(ctx, getNodeById); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeById: %w", err)
	}
	if q.markAllocationsInactiveForInactiveNodesStmt, err = db.PrepareContext(ctx, markAllocationsInactiveForInactiveNodes); err != nil {
		return nil, fmt.Errorf("error preparing query MarkAllocationsInactiveForInactiveNodes: %w", err)
	}
	if q.markInactiveNodesStmt, err = db.PrepareContext(ctx, markInactiveNodes); err != nil {
		return nil, fmt.Errorf("error preparing query MarkInactiveNodes: %w", err)
	}
	if q.markNodeDeletableStmt, err = db.PrepareContext(ctx, markNodeDeletable); err != nil {
		return nil, fmt.Errorf("error preparing query MarkNodeDeletable: %w", err)
	}
	if q.markNodeInactiveStmt, err = db.PrepareContext(ctx, markNodeInactive); err != nil {
		return nil, fmt.Errorf("error preparing query MarkNodeInactive: %w", err)
	}
	if q.updateHeartbeatStmt, err = db.PrepareContext(ctx, updateHeartbeat); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHeartbeat: %w", err)
	}
	if q.upsertAllocationStmt, err = db.PrepareContext(ctx, upsertAllocation); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertAllocation: %w", err)
	}
	if q.upsertClusterStmt, err = db.PrepareContext(ctx, upsertCluster); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertCluster: %w", err)
	}
	if q.upsertNodeStmt, err = db.PrepareContext(ctx, upsertNode); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertNode: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deregisterNodeStmt != nil {
		if cerr := q.deregisterNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deregisterNodeStmt: %w", cerr)
		}
	}
	if q.getActiveNodesStmt != nil {
		if cerr := q.getActiveNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveNodesStmt: %w", cerr)
		}
	}
	if q.getAllDomainsAndTaskListsByClusterCnameStmt != nil {
		if cerr := q.getAllDomainsAndTaskListsByClusterCnameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDomainsAndTaskListsByClusterCnameStmt: %w", cerr)
		}
	}
	if q.getAllocationByIdStmt != nil {
		if cerr := q.getAllocationByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllocationByIdStmt: %w", cerr)
		}
	}
	if q.getAllocationByNodeIdStmt != nil {
		if cerr := q.getAllocationByNodeIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllocationByNodeIdStmt: %w", cerr)
		}
	}
	if q.getAllocationsForTasklistStmt != nil {
		if cerr := q.getAllocationsForTasklistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllocationsForTasklistStmt: %w", cerr)
		}
	}
	if q.getClusterStmt != nil {
		if cerr := q.getClusterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClusterStmt: %w", cerr)
		}
	}
	if q.getClustersByDomainStmt != nil {
		if cerr := q.getClustersByDomainStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClustersByDomainStmt: %w", cerr)
		}
	}
	if q.getNodeByIdStmt != nil {
		if cerr := q.getNodeByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeByIdStmt: %w", cerr)
		}
	}
	if q.markAllocationsInactiveForInactiveNodesStmt != nil {
		if cerr := q.markAllocationsInactiveForInactiveNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markAllocationsInactiveForInactiveNodesStmt: %w", cerr)
		}
	}
	if q.markInactiveNodesStmt != nil {
		if cerr := q.markInactiveNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markInactiveNodesStmt: %w", cerr)
		}
	}
	if q.markNodeDeletableStmt != nil {
		if cerr := q.markNodeDeletableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markNodeDeletableStmt: %w", cerr)
		}
	}
	if q.markNodeInactiveStmt != nil {
		if cerr := q.markNodeInactiveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markNodeInactiveStmt: %w", cerr)
		}
	}
	if q.updateHeartbeatStmt != nil {
		if cerr := q.updateHeartbeatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHeartbeatStmt: %w", cerr)
		}
	}
	if q.upsertAllocationStmt != nil {
		if cerr := q.upsertAllocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertAllocationStmt: %w", cerr)
		}
	}
	if q.upsertClusterStmt != nil {
		if cerr := q.upsertClusterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertClusterStmt: %w", cerr)
		}
	}
	if q.upsertNodeStmt != nil {
		if cerr := q.upsertNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertNodeStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                          DBTX
	tx                                          *sql.Tx
	deregisterNodeStmt                          *sql.Stmt
	getActiveNodesStmt                          *sql.Stmt
	getAllDomainsAndTaskListsByClusterCnameStmt *sql.Stmt
	getAllocationByIdStmt                       *sql.Stmt
	getAllocationByNodeIdStmt                   *sql.Stmt
	getAllocationsForTasklistStmt               *sql.Stmt
	getClusterStmt                              *sql.Stmt
	getClustersByDomainStmt                     *sql.Stmt
	getNodeByIdStmt                             *sql.Stmt
	markAllocationsInactiveForInactiveNodesStmt *sql.Stmt
	markInactiveNodesStmt                       *sql.Stmt
	markNodeDeletableStmt                       *sql.Stmt
	markNodeInactiveStmt                        *sql.Stmt
	updateHeartbeatStmt                         *sql.Stmt
	upsertAllocationStmt                        *sql.Stmt
	upsertClusterStmt                           *sql.Stmt
	upsertNodeStmt                              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		deregisterNodeStmt: q.deregisterNodeStmt,
		getActiveNodesStmt: q.getActiveNodesStmt,
		getAllDomainsAndTaskListsByClusterCnameStmt: q.getAllDomainsAndTaskListsByClusterCnameStmt,
		getAllocationByIdStmt:                       q.getAllocationByIdStmt,
		getAllocationByNodeIdStmt:                   q.getAllocationByNodeIdStmt,
		getAllocationsForTasklistStmt:               q.getAllocationsForTasklistStmt,
		getClusterStmt:                              q.getClusterStmt,
		getClustersByDomainStmt:                     q.getClustersByDomainStmt,
		getNodeByIdStmt:                             q.getNodeByIdStmt,
		markAllocationsInactiveForInactiveNodesStmt: q.markAllocationsInactiveForInactiveNodesStmt,
		markInactiveNodesStmt:                       q.markInactiveNodesStmt,
		markNodeDeletableStmt:                       q.markNodeDeletableStmt,
		markNodeInactiveStmt:                        q.markNodeInactiveStmt,
		updateHeartbeatStmt:                         q.updateHeartbeatStmt,
		upsertAllocationStmt:                        q.upsertAllocationStmt,
		upsertClusterStmt:                           q.upsertClusterStmt,
		upsertNodeStmt:                              q.upsertNodeStmt,
	}
}
