// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package helixClusterMysql

import (
	"context"
)

type Querier interface {
	//DeregisterNode
	//
	//  UPDATE helix_nodes
	//  SET status = 0
	//  WHERE cluster_name = ? AND node_uuid = ? AND status = 1
	DeregisterNode(ctx context.Context, arg DeregisterNodeParams) error
	//GetActiveNodes
	//
	//  SELECT cluster_name, node_uuid, node_metadata, last_hb_time, status, created_at, updated_at
	//  FROM helix_nodes
	//  WHERE cluster_name = ? AND status = 1
	GetActiveNodes(ctx context.Context, clusterName string) ([]*GetActiveNodesRow, error)
	//GetNodeById
	//
	//  SELECT cluster_name, node_uuid, node_metadata, last_hb_time, status, created_at, updated_at
	//  FROM helix_nodes
	//  WHERE cluster_name = ? AND node_uuid = ? AND status = 1
	GetNodeById(ctx context.Context, arg GetNodeByIdParams) (*GetNodeByIdRow, error)
	//MarkInactiveNodes
	//
	//  UPDATE helix_nodes
	//  SET status = 0
	//  WHERE cluster_name = ? AND status = 1 AND last_hb_time < ?
	MarkInactiveNodes(ctx context.Context, arg MarkInactiveNodesParams) error
	//UpdateHeartbeat
	//
	//  UPDATE helix_nodes
	//  SET last_hb_time = ?, status = 1
	//  WHERE cluster_name = ? AND node_uuid = ? AND (status = 1 OR status = 0)
	UpdateHeartbeat(ctx context.Context, arg UpdateHeartbeatParams) error
	//UpsertNode
	//
	//  INSERT INTO helix_nodes (cluster_name, node_uuid, node_metadata, last_hb_time, status)
	//  VALUES (?, ?, ?, ?, 1)
	//  ON DUPLICATE KEY UPDATE
	//      node_metadata = VALUES(node_metadata),
	//      last_hb_time = VALUES(last_hb_time),
	//      status = 1
	UpsertNode(ctx context.Context, arg UpsertNodeParams) error
}

var _ Querier = (*Queries)(nil)
