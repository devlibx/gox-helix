// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package helixClusterMysql

import (
	"context"
)

type Querier interface {
	//DeregisterNode
	//
	//  UPDATE helix_nodes
	//  SET status  = 0,
	//      version = version + 1
	//  WHERE cluster_name = ?
	//    AND node_uuid = ?
	//    AND status = 1
	DeregisterNode(ctx context.Context, arg DeregisterNodeParams) error
	//GetActiveNodes
	//
	//  SELECT cluster_name,
	//         node_uuid,
	//         node_metadata,
	//         last_hb_time,
	//         status,
	//         version,
	//         created_at,
	//         updated_at
	//  FROM helix_nodes
	//  WHERE cluster_name = ?
	//    AND status = 1
	GetActiveNodes(ctx context.Context, clusterName string) ([]*GetActiveNodesRow, error)
	//GetCluster
	//
	//  SELECT cluster,
	//         domain,
	//         tasklist,
	//         metadata,
	//         partition_count,
	//         status,
	//         created_at,
	//         updated_at
	//  FROM helix_cluster
	//  WHERE cluster = ?
	//    AND domain = ?
	//    AND tasklist = ?
	//    AND status = 1
	GetCluster(ctx context.Context, arg GetClusterParams) (*GetClusterRow, error)
	//GetClustersByDomain
	//
	//  SELECT cluster,
	//         domain,
	//         tasklist,
	//         metadata,
	//         partition_count,
	//         status,
	//         created_at,
	//         updated_at
	//  FROM helix_cluster
	//  WHERE cluster = ?
	//    AND domain = ?
	//    AND status = 1
	GetClustersByDomain(ctx context.Context, arg GetClustersByDomainParams) ([]*GetClustersByDomainRow, error)
	//GetNodeById
	//
	//  SELECT id, cluster_name, node_uuid, node_metadata, last_hb_time, status, version, created_at, updated_at
	//  FROM helix_nodes
	//  WHERE cluster_name = ?
	//    AND node_uuid = ?
	//    AND status = 1
	GetNodeById(ctx context.Context, arg GetNodeByIdParams) (*HelixNode, error)
	//MarkInactiveNodes
	//
	//  UPDATE helix_nodes
	//  SET status  = 0,
	//      version = version + 1
	//  WHERE cluster_name = ?
	//    AND status = 1
	//    AND last_hb_time < ?
	MarkInactiveNodes(ctx context.Context, arg MarkInactiveNodesParams) error
	//UpdateHeartbeat
	//
	//  UPDATE helix_nodes
	//  SET last_hb_time = ?,
	//      status       = 1,
	//      version      = version + 1
	//  WHERE cluster_name = ?
	//    AND node_uuid = ?
	//    AND (status = 1 OR status = 0)
	UpdateHeartbeat(ctx context.Context, arg UpdateHeartbeatParams) error
	//UpsertCluster
	//
	//  INSERT INTO helix_cluster (cluster, domain, tasklist, partition_count, metadata, status)
	//  VALUES (?, ?, ?, ?, ?, 1)
	//  ON DUPLICATE KEY UPDATE partition_count = VALUES(partition_count),
	//                          metadata        = VALUES(metadata),
	//                          status          = 1
	UpsertCluster(ctx context.Context, arg UpsertClusterParams) error
	//UpsertNode
	//
	//  INSERT INTO helix_nodes (cluster_name, node_uuid, node_metadata, last_hb_time, status)
	//  VALUES (?, ?, ?, ?, 1)
	//  ON DUPLICATE KEY UPDATE node_metadata = VALUES(node_metadata),
	//                          last_hb_time  = VALUES(last_hb_time),
	//                          status        = 1
	UpsertNode(ctx context.Context, arg UpsertNodeParams) error
}

var _ Querier = (*Queries)(nil)
