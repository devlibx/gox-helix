// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package helixClusterMysql

import (
	"context"
	"database/sql"
)

type Querier interface {
	//DeregisterNode
	//
	//  UPDATE helix_nodes /*+ MAX_EXECUTION_TIME(1000) */
	//  SET status  = 0,
	//      version = version + 1
	//  WHERE cluster_name = ?
	//    AND node_uuid = ?
	//    AND status = 1
	DeregisterNode(ctx context.Context, arg DeregisterNodeParams) error
	//GetActiveNodes
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */ cluster_name,
	//         node_uuid,
	//         node_metadata,
	//         last_hb_time,
	//         status,
	//         version,
	//         created_at,
	//         updated_at
	//  FROM helix_nodes
	//  WHERE cluster_name = ?
	//    AND status = 1
	GetActiveNodes(ctx context.Context, clusterName string) ([]*GetActiveNodesRow, error)
	//GetAllDomainsAndTaskListsByClusterCname
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */ id, cluster, domain, tasklist, metadata, partition_count, status, created_at, updated_at
	//  FROM helix_cluster
	//  WHERE cluster = ?
	//    AND status = 1
	GetAllDomainsAndTaskListsByClusterCname(ctx context.Context, cluster string) ([]*HelixCluster, error)
	//GetAllocationById
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */ id,
	//         cluster,
	//         domain,
	//         tasklist,
	//         node_id,
	//         status,
	//         partition_info,
	//         metadata,
	//         created_at,
	//         updated_at
	//  FROM helix_allocation
	//  WHERE id = ?
	//    AND status = ?
	GetAllocationById(ctx context.Context, arg GetAllocationByIdParams) (*HelixAllocation, error)
	//GetAllocationByNodeId
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */ id,
	//         cluster,
	//         domain,
	//         tasklist,
	//         node_id,
	//         status,
	//         partition_info,
	//         metadata,
	//         created_at,
	//         updated_at
	//  FROM helix_allocation
	//  WHERE node_id = ?
	//    AND status = 1
	GetAllocationByNodeId(ctx context.Context, nodeID string) (*HelixAllocation, error)
	//GetAllocationsForTasklist
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */
	//         ha.id,
	//         ha.cluster,
	//         ha.domain,
	//         ha.tasklist,
	//         ha.node_id,
	//         ha.status,
	//         ha.partition_info,
	//         ha.metadata,
	//         ha.created_at,
	//         ha.updated_at
	//  FROM helix_allocation ha
	//  INNER JOIN helix_nodes hn ON ha.node_id = hn.node_uuid
	//                           AND ha.cluster = hn.cluster_name
	//  WHERE ha.cluster = ?
	//    AND ha.domain = ?
	//    AND ha.tasklist = ?
	//    AND ha.status = 1
	//    AND hn.status = 1
	GetAllocationsForTasklist(ctx context.Context, arg GetAllocationsForTasklistParams) ([]*HelixAllocation, error)
	//GetCluster
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */ cluster,
	//         domain,
	//         tasklist,
	//         metadata,
	//         partition_count,
	//         status,
	//         created_at,
	//         updated_at
	//  FROM helix_cluster
	//  WHERE cluster = ?
	//    AND domain = ?
	//    AND tasklist = ?
	//    AND status = 1
	GetCluster(ctx context.Context, arg GetClusterParams) (*GetClusterRow, error)
	//GetClustersByDomain
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */ cluster,
	//         domain,
	//         tasklist,
	//         metadata,
	//         partition_count,
	//         status,
	//         created_at,
	//         updated_at
	//  FROM helix_cluster
	//  WHERE cluster = ?
	//    AND domain = ?
	//    AND status = 1
	GetClustersByDomain(ctx context.Context, arg GetClustersByDomainParams) ([]*GetClustersByDomainRow, error)
	//GetNodeById
	//
	//  SELECT /*+ MAX_EXECUTION_TIME(1000) */ id, cluster_name, node_uuid, node_metadata, last_hb_time, status, version, created_at, updated_at
	//  FROM helix_nodes
	//  WHERE cluster_name = ?
	//    AND node_uuid = ?
	//    AND status = 1
	GetNodeById(ctx context.Context, arg GetNodeByIdParams) (*HelixNode, error)
	//MarkAllocationsInactiveForInactiveNodes
	//
	//  UPDATE /*+ MAX_EXECUTION_TIME(1000) */ helix_allocation ha
	//  INNER JOIN helix_nodes hn ON ha.node_id = hn.node_uuid
	//                           AND ha.cluster = hn.cluster_name
	//  SET ha.status = 0
	//  WHERE ha.cluster = ?
	//    AND ha.domain = ?
	//    AND ha.tasklist = ?
	//    AND ha.status = 1
	//    AND hn.status = 0
	MarkAllocationsInactiveForInactiveNodes(ctx context.Context, arg MarkAllocationsInactiveForInactiveNodesParams) error
	//MarkInactiveNodes
	//
	//  UPDATE /*+ MAX_EXECUTION_TIME(1000) */ helix_nodes
	//  SET status  = 0,
	//      version = version + 1
	//  WHERE cluster_name = ?
	//    AND status = 1
	//    AND last_hb_time < ?
	MarkInactiveNodes(ctx context.Context, arg MarkInactiveNodesParams) error
	//MarkNodeDeletable
	//
	//  UPDATE /*+ MAX_EXECUTION_TIME(1000) */ helix_allocation
	//  SET status = 2
	//  WHERE node_id = ?
	//    AND status = 0
	MarkNodeDeletable(ctx context.Context, nodeID string) error
	//MarkNodeInactive
	//
	//  UPDATE /*+ MAX_EXECUTION_TIME(1000) */ helix_allocation
	//  SET status = 0
	//  WHERE node_id = ?
	//    AND status = 1
	MarkNodeInactive(ctx context.Context, nodeID string) error
	//UpdateHeartbeat
	//
	//  UPDATE helix_nodes /*+ MAX_EXECUTION_TIME(1000) */
	//  SET last_hb_time = ?,
	//      version      = version + 1
	//  WHERE cluster_name = ?
	//    AND node_uuid = ?
	//    AND status = 1
	UpdateHeartbeat(ctx context.Context, arg UpdateHeartbeatParams) (sql.Result, error)
	//UpsertAllocation
	//
	//  INSERT /*+ MAX_EXECUTION_TIME(1000) */ INTO helix_allocation (cluster, domain, tasklist, node_id, partition_info, metadata, status)
	//  VALUES (?, ?, ?, ?, ?, ?, 1)
	//  ON DUPLICATE KEY UPDATE partition_info = VALUES(partition_info),
	//                          metadata       = VALUES(metadata),
	//                          status         = 1
	UpsertAllocation(ctx context.Context, arg UpsertAllocationParams) error
	//UpsertCluster
	//
	//  INSERT /*+ MAX_EXECUTION_TIME(1000) */ INTO helix_cluster (cluster, domain, tasklist, partition_count, metadata, status)
	//  VALUES (?, ?, ?, ?, ?, 1)
	//  ON DUPLICATE KEY UPDATE partition_count = VALUES(partition_count),
	//                          metadata        = VALUES(metadata),
	//                          status          = 1
	UpsertCluster(ctx context.Context, arg UpsertClusterParams) error
	//UpsertNode
	//
	//  INSERT /*+ MAX_EXECUTION_TIME(1000) */ INTO helix_nodes (cluster_name, node_uuid, node_metadata, last_hb_time, status)
	//  VALUES (?, ?, ?, ?, 1)
	//  ON DUPLICATE KEY UPDATE node_metadata = VALUES(node_metadata),
	//                          last_hb_time  = VALUES(last_hb_time),
	//                          status        = 1
	UpsertNode(ctx context.Context, arg UpsertNodeParams) error
}

var _ Querier = (*Queries)(nil)
