// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package mysql

import (
	"context"
	"time"
)

const createLock = `-- name: CreateLock :exec
INSERT INTO locks (lock_key, owner_id, expires_at)
VALUES (?, ?, ?)
`

type CreateLockParams struct {
	LockKey   string
	OwnerID   string
	ExpiresAt time.Time
}

func (q *Queries) CreateLock(ctx context.Context, arg CreateLockParams) error {
	_, err := q.db.ExecContext(ctx, createLock, arg.LockKey, arg.OwnerID, arg.ExpiresAt)
	return err
}

const getLock = `-- name: GetLock :one
SELECT lock_key, owner_id, expires_at FROM locks
WHERE lock_key = ?
`

func (q *Queries) GetLock(ctx context.Context, lockKey string) (Lock, error) {
	row := q.db.QueryRowContext(ctx, getLock, lockKey)
	var i Lock
	err := row.Scan(&i.LockKey, &i.OwnerID, &i.ExpiresAt)
	return i, err
}

const renewLock = `-- name: RenewLock :exec
UPDATE locks
SET expires_at = ?
WHERE lock_key = ? AND owner_id = ?
`

type RenewLockParams struct {
	ExpiresAt time.Time
	LockKey   string
	OwnerID   string
}

func (q *Queries) RenewLock(ctx context.Context, arg RenewLockParams) error {
	_, err := q.db.ExecContext(ctx, renewLock, arg.ExpiresAt, arg.LockKey, arg.OwnerID)
	return err
}

const tryAcquireLock = `-- name: TryAcquireLock :exec
INSERT INTO locks (lock_key, owner_id, expires_at)
VALUES (?, ?, ?)
ON DUPLICATE KEY UPDATE
    owner_id = IF(expires_at < NOW(), VALUES(owner_id), owner_id),
    expires_at = IF(expires_at < NOW(), VALUES(expires_at), expires_at)
`

type TryAcquireLockParams struct {
	LockKey   string
	OwnerID   string
	ExpiresAt time.Time
}

func (q *Queries) TryAcquireLock(ctx context.Context, arg TryAcquireLockParams) error {
	_, err := q.db.ExecContext(ctx, tryAcquireLock, arg.LockKey, arg.OwnerID, arg.ExpiresAt)
	return err
}

const updateLock = `-- name: UpdateLock :exec
UPDATE locks
SET owner_id = ?, expires_at = ?
WHERE lock_key = ?
`

type UpdateLockParams struct {
	OwnerID   string
	ExpiresAt time.Time
	LockKey   string
}

func (q *Queries) UpdateLock(ctx context.Context, arg UpdateLockParams) error {
	_, err := q.db.ExecContext(ctx, updateLock, arg.OwnerID, arg.ExpiresAt, arg.LockKey)
	return err
}
