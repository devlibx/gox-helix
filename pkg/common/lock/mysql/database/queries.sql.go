// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package helixMysql

import (
	"context"
	"time"
)

const upsertLock = `-- name: UpsertLock :exec
INSERT INTO helix_locks (lock_key, owner_id, expires_at, status)
VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE
    owner_id = VALUES(owner_id),
    expires_at = VALUES(expires_at),
    status = VALUES(status),
    updated_at = CURRENT_TIMESTAMP
`

type UpsertLockParams struct {
	LockKey   string           `json:"lock_key"`
	OwnerID   string           `json:"owner_id"`
	ExpiresAt time.Time        `json:"expires_at"`
	Status    HelixLocksStatus `json:"status"`
}

// UpsertLock
//
//	INSERT INTO helix_locks (lock_key, owner_id, expires_at, status)
//	VALUES (?, ?, ?, ?)
//	ON DUPLICATE KEY UPDATE
//	    owner_id = VALUES(owner_id),
//	    expires_at = VALUES(expires_at),
//	    status = VALUES(status),
//	    updated_at = CURRENT_TIMESTAMP
func (q *Queries) UpsertLock(ctx context.Context, arg UpsertLockParams) error {
	_, err := q.exec(ctx, q.upsertLockStmt, upsertLock,
		arg.LockKey,
		arg.OwnerID,
		arg.ExpiresAt,
		arg.Status,
	)
	return err
}
