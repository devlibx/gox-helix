// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package helixMysql

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type HelixLocksStatus string

const (
	HelixLocksStatusActive    HelixLocksStatus = "active"
	HelixLocksStatusInactive  HelixLocksStatus = "inactive"
	HelixLocksStatusDeletable HelixLocksStatus = "deletable"
)

func (e *HelixLocksStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HelixLocksStatus(s)
	case string:
		*e = HelixLocksStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for HelixLocksStatus: %T", src)
	}
	return nil
}

type NullHelixLocksStatus struct {
	HelixLocksStatus HelixLocksStatus `json:"helix_locks_status"`
	Valid            bool             `json:"valid"` // Valid is true if HelixLocksStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHelixLocksStatus) Scan(value interface{}) error {
	if value == nil {
		ns.HelixLocksStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HelixLocksStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHelixLocksStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HelixLocksStatus), nil
}

type HelixLock struct {
	ID        uint64           `json:"id"`
	LockKey   string           `json:"lock_key"`
	OwnerID   string           `json:"owner_id"`
	ExpiresAt time.Time        `json:"expires_at"`
	Status    HelixLocksStatus `json:"status"`
	CreatedAt time.Time        `json:"created_at"`
	UpdatedAt time.Time        `json:"updated_at"`
}
